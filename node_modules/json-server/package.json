{
  "_args": [
    [
      "json-server@git+https://github.com/ccnokes/json-server.git",
      "/Users/tonylefler/Documents/projects/comfy-drive/node_modules/bogus-api"
    ]
  ],
  "_from": "git+https://github.com/ccnokes/json-server.git",
  "_id": "json-server@0.8.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/json-server",
  "_phantomChildren": {
    "has-color": "0.1.7"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/ccnokes/json-server/master/package.json",
      "gitUrl": "git://github.com/ccnokes/json-server.git",
      "httpsUrl": "git+https://github.com/ccnokes/json-server.git",
      "shortcut": "github:ccnokes/json-server",
      "ssh": "git@github.com:ccnokes/json-server.git",
      "sshUrl": "git+ssh://git@github.com/ccnokes/json-server.git",
      "type": "github"
    },
    "name": "json-server",
    "raw": "json-server@git+https://github.com/ccnokes/json-server.git",
    "rawSpec": "git+https://github.com/ccnokes/json-server.git",
    "scope": null,
    "spec": "git+https://github.com/ccnokes/json-server.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/bogus-api"
  ],
  "_resolved": "git+https://github.com/ccnokes/json-server.git#92f2c74dcea17bb1c8aaf7b8f79b7f78d6937fcc",
  "_shasum": "396573e22678b06aa9f8e283c9bc884a95500c5a",
  "_shrinkwrap": null,
  "_spec": "json-server@git+https://github.com/ccnokes/json-server.git",
  "_where": "/Users/tonylefler/Documents/projects/comfy-drive/node_modules/bogus-api",
  "author": {
    "email": "typicode@gmail.com",
    "name": "Typicode"
  },
  "bin": {
    "json-server": "./bin/index.js"
  },
  "bugs": {
    "url": "https://github.com/typicode/json-server/issues"
  },
  "dependencies": {
    "body-parser": "^1.8.1",
    "chalk": "^0.4.0",
    "connect-pause": "^0.1.0",
    "cors": "^2.3.0",
    "errorhandler": "^1.2.0",
    "express": "^4.9.5",
    "got": "^3.3.0",
    "lodash": "^3.9.2",
    "lowdb": "^0.10.0",
    "method-override": "^2.1.2",
    "morgan": "^1.3.1",
    "node-uuid": "^1.4.2",
    "object-assign": "^4.0.1",
    "pluralize": "^1.1.2",
    "underscore-db": "^0.9.1",
    "update-notifier": "^0.5.0",
    "yargs": "^3.10.0"
  },
  "description": "Serves JSON files through REST routes.",
  "devDependencies": {
    "husky": "^0.6.1",
    "mocha": "^2.2.4",
    "rimraf": "^2.4.1",
    "server-ready": "^0.2.0",
    "standard": "^3.8.0",
    "supertest": "~0.8.1"
  },
  "directories": {
    "test": "test"
  },
  "gitHead": "92f2c74dcea17bb1c8aaf7b8f79b7f78d6937fcc",
  "homepage": "https://github.com/typicode/json-server",
  "keywords": [
    "JSON",
    "server",
    "fake",
    "REST",
    "API",
    "prototyping",
    "mock",
    "mocking",
    "test",
    "testing",
    "rest",
    "data",
    "dummy",
    "sandbox"
  ],
  "license": "MIT",
  "main": "./src/server/index.js",
  "name": "json-server",
  "optionalDependencies": {},
  "readme": "# JSON Server [![](https://travis-ci.org/typicode/json-server.svg)](https://travis-ci.org/typicode/json-server) [![](https://badge.fury.io/js/json-server.svg)](http://badge.fury.io/js/json-server) [![](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/typicode/json-server?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nGet a full fake REST API with __zero coding__ in __less than 30 seconds__ (seriously)\n\nCreated with <3 for front-end developers who need a quick back-end for prototyping and mocking.\n\n  * [Egghead.io free video tutorial - Creating demo APIs with json-server](https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server)\n  * [JSONPlaceholder - Live running version](http://jsonplaceholder.typicode.com)\n\n_See also [hotel](https://github.com/typicode/hotel) :hotel:, a process manager for web developers._\n\n## Example\n\nCreate a `db.json` file\n\n```json\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\n  ],\n  \"profile\": { \"name\": \"typicode\" }\n}\n```\n\nStart JSON Server\n\n```bash\n$ json-server --watch db.json\n```\n\nNow if you go to [http://localhost:3000/posts/1](), you'll get\n\n```json\n{ \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n```\n\nAlso, if you make POST, PUT, PATCH or DELETE requests, changes will be automatically and safely saved to `db.json` using [lowdb](https://github.com/typicode/lowdb).\n\n## Install\n\n```bash\n$ npm install -g json-server\n```\n\n## Routes\n\nBased on the previous `db.json` file, here are all the default routes. You can also add [other routes](#add-routes) using `--routes`.\n\n### Plural routes\n\n```\nGET    /posts\nGET    /posts/1\nPOST   /posts\nPUT    /posts/1\nPATCH  /posts/1\nDELETE /posts/1\n```\n\n### Singular routes\n\n```\nGET    /profile\nPOST   /profile\nPUT    /profile\nPATCH  /profile\n```\n\n### Filter\n\nUse `.` to access deep properties\n\n```\nGET /posts?title=json-server&author=typicode\nGET /posts?id=1&id=2\nGET /comments?author.name=typicode\n```\n\n### Slice\n\nAdd `_start` and `_end` or `_limit` (an `X-Total-Count` header is included in the response)\n\n```\nGET /posts?_start=20&_end=30\nGET /posts/1/comments?_start=20&_end=30\nGET /posts/1/comments?_start=20&_limit=10\n```\n\n### Sort\n\nAdd `_sort` and `_order` (ascending order by default)\n\n```\nGET /posts?_sort=views&_order=DESC\nGET /posts/1/comments?_sort=votes&_order=ASC\n```\n\n### Range\n\nAdd `_gte` or `_lte`\n\n```\nGET /posts?views_gte=10&views_lte=20\n```\n\n### Full-text search\n\nAdd `q`\n\n```\nGET /posts?q=internet\n```\n\n### Relationships\n\nTo include children resources, add `_embed`\n\n```\nGET /posts?_embed=comments\nGET /posts/1?_embed=comments\n```\n\nTo include parent resource, add `_expand`\n\n```\nGET /comments?_expand=post\nGET /comments/1?_expand=post\n```\n\nTo get nested resources (by default one level, [add routes](#add-routes) for more)\n\n```\nGET /posts/1/comments\n```\n\n### Database\n\n```\nGET /db\n```\n\n### Homepage\n\nReturns default index file or serves `./public` directory\n\n```\nGET /\n```\n\n## Extras\n\n### Static file server\n\nYou can use JSON Server to serve your HTML, JS and CSS, simply create a `./public` directory\nor use `--static`.\n\n```bash\nmkdir public\necho 'hello word' > public/index.html\njson-server db.json\n```\n\n```bash\njson-server db.json --static ./static\n```\n\n### Access from anywhere\n\nYou can access your fake API from anywhere using CORS and JSONP.\n\n### Remote schema\n\nYou can load remote schemas.\n\n```bash\n$ json-server http://example.com/file.json\n$ json-server http://jsonplaceholder.typicode.com/db\n```\n\n### Generate random data\n\nUsing JS instead of a JSON file, you can create data programmatically.\n\n```javascript\n// index.js\nmodule.exports = function() {\n  var data = { users: [] }\n  // Create 1000 users\n  for (var i = 0; i < 1000; i++) {\n    data.users.push({ id: i, name: 'user' + i })\n  }\n  return data\n}\n```\n\n```bash\n$ json-server index.js\n```\n\n__Tip__ use modules like [faker](https://github.com/Marak/faker.js), [casual](https://github.com/boo1ean/casual) or [chance](https://github.com/victorquinn/chancejs).\n\n### Add routes\n\nCreate a `routes.json` file.\n\n```json\n{\n  \"/api/\": \"/\",\n  \"/blog/:resource/:id/show\": \"/:resource/:id\"\n}\n```\n\nStart JSON Server with `--routes` option.\n\n```bash\njson-server db.json --routes routes.json\n```\n\nNow you can access resources using additional routes.\n\n```bash\n/api/posts\n/api/posts/1\n/blog/posts/1/show\n```\n\n### Module\n\nIf you need to add authentication, validation, you can use the project as a module in combination with other Express middlewares.\n\n```javascript\nvar jsonServer = require('json-server')\n\n// Returns an Express server\nvar server = jsonServer.create()\n\n// Set default middlewares (logger, static, cors and no-cache)\nserver.use(jsonServer.defaults())\n\n// Add custom routes\n// server.get('/custom', function (req, res) { res.json({ msg: 'hello' }) })\n\n// Returns an Express router\nvar router = jsonServer.router('db.json')\nserver.use(router)\n\nserver.listen(3000)\n```\n\nFor an in-memory database, you can pass an object to `jsonServer.router()`.\nPlease note also that `jsonServer.router()` can be used in existing Express projects.\n\nTo modify responses, use `router.render()`:\n\n```javascript\n// In this example, returned resources will be wrapped in a body property\nrouter.render = function (req, res) {\n  res.jsonp({\n   body: res.locals.data\n  })\n}\n```\n\nTo add rewrite rules, use `jsonServer.rewriter()`:\n\n```javascript\n// Add this before server.use(router)\nserver.use(jsonServer.rewriter({\n  '/api/': '/',\n  '/blog/:resource/:id/show': '/:resource/:id'\n}))\n```\n\nAlternatively, you can also mount the router on another path.\n\n```javascript\nserver.use('/api', router)\n```\n\n### Deployment\n\nYou can deploy JSON Server. For example, [JSONPlaceholder](http://jsonplaceholder.typicode.com) is an online fake API powered by JSON Server and running on Heroku.\n\n## Links\n\n### Video\n\n* [Creating Demo APIs with json-server on egghead.io](https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server)\n\n### Articles\n\n* [Node Module Of The Week - json-server](http://nmotw.in/json-server/)\n* [Mock up your REST API with JSON Server](http://www.betterpixels.co.uk/projects/2015/05/09/mock-up-your-rest-api-with-json-server/)\n* [how to build quick json REST APIs for development](http://outloudthinking.me/how-to-build-quick-json-rest-apis/)\n* [ng-admin: Add an AngularJS admin GUI to any RESTful API](http://marmelab.com/blog/2014/09/15/easy-backend-for-your-restful-api.html)\n* [Fast prototyping using Restangular and Json-server](http://glebbahmutov.com/blog/fast-prototyping-using-restangular-and-json-server/)\n\n### Third-party tools\n\n* [Grunt JSON Server](https://github.com/tfiwm/grunt-json-server)\n* [Docker JSON Server](https://github.com/clue/docker-json-server)\n* [JSON Server GUI](https://github.com/naholyr/json-server-gui)\n* [JSON file generator](https://github.com/dfsq/json-server-init)\n\n## License\n\nMIT - [Typicode](https://github.com/typicode)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/typicode/json-server.git"
  },
  "scripts": {
    "prepush": "npm t",
    "start": "node bin",
    "test": "NODE_ENV=test mocha -R spec test/**/*.js && standard"
  },
  "version": "0.8.2"
}
